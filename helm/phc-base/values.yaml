# Default values for phc-base.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ports:
  - name: http
    containerPort: 80
    protocol: TCP

env: []

startupProbe: {}

livenessProbe: {}

readinessProbe: {}

serviceAnnotations: {}

service:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http

ingress:
  enabled: false
  className: ""
  # If useManagedCertificate true, makes ingress use the managed certificate specified
  # in the values file (either generated or the value from managedCertificate.name)
  # Note that it is possible and legal to have both a managed certificate and a
  # cert-manager certificate attached to the ingress.
  useManagedCertificate: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: {}
   # - host: chart-example.local
   #   paths:
   #     - path: /
   #       pathType: ImplementationSpecific

  # If secretName is provided, we will use the pre-existing certificate stored in
  # the K8S secret name of the given name.
  # Otherwise, we will use the name provided in certificate.name, or derive one
  # if certificate.name is empty.
  # tls should probably be empty if you use Google managed certificates for the ingress.
  tls: []
  #  - secretName: optional-chart-example.local
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

extraContainers: []

volumes: []

volumeMounts: []

envFrom: []

# Can be used for both Google ESP sidecar and/or for the Ingress
certificate:
  create: true
  # commonName: "example.com"
  name: ""
  issuer: selfsigned-dev
  issuerKind: ClusterIssuer

managedCertificate:
  create: false
  name: ""
  # domains: []

esp:
  enabled: false
  port: 9000
  # service: "example.com"
  # ESPv2 Envoy admin port is exposed if adminPort is set
  # This can be used to expose prometheus at /stats/prometheus
  # adminPort: 9001
  image:
    repository: gcr.io/endpoints-release/endpoints-runtime
    tag: "2"

backendconfig:
  enabled: false
  # type: HTTP
  # requestPath: /
  # port: 3333


podMonitor:
  endpoints: []
  # - port: prometheus
  #   path: /metrics
